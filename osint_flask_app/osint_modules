import whois
import socket
import dns.resolver
import requests
from ipwhois import IPWhois
from fpdf import FPDF
from OpenSSL import crypto
import ssl

# WHOIS Info
def get_whois(domain):
    try:
        return whois.whois(domain)
    except Exception as e:
        return {"error": str(e)}

# DNS Info
def get_dns_records(domain):
    records = {}
    for rtype in ['A', 'MX', 'NS', 'TXT']:
        try:
            answers = dns.resolver.resolve(domain, rtype)
            records[rtype] = [r.to_text() for r in answers]
        except Exception as e:
            records[rtype] = f"Failed: {e}"
    return records

# IP + Geolocation Info
def get_ip_info(domain):
    try:
        ip = socket.gethostbyname(domain)
        ip_info = IPWhois(ip).lookup_rdap()
        return ip, ip_info
    except Exception as e:
        return None, {"error": str(e)}

# SSL Info
def get_ssl_info(domain):
    try:
        cert = ssl.get_server_certificate((domain, 443))
        x509 = crypto.load_certificate(crypto.FILETYPE_PEM, cert)
        return {
            "Subject": dict(x509.get_subject().get_components()),
            "Issuer": dict(x509.get_issuer().get_components()),
            "Valid From": x509.get_notBefore().decode(),
            "Valid Until": x509.get_notAfter().decode()
        }
    except Exception as e:
        return {"error": str(e)}

# Subdomain Enumeration
def get_subdomains_crtsh(domain):
    url = f"https://crt.sh/?q=%25.{domain}&output=json"
    try:
        r = requests.get(url, timeout=10)
        r.raise_for_status()
        entries = r.json()
        subdomains = set()
        for entry in entries:
            name_value = entry.get("name_value", "")
            for sub in name_value.split("\n"):
                if sub.endswith(domain):
                    subdomains.add(sub.strip())
        return sorted(subdomains)
    except Exception as e:
        return [f"Failed: {e}"]

# Helper to format dictionaries
def format_dict(d):
    if isinstance(d, dict):
        return "\n".join(f"{k}: {v}" for k, v in d.items())
    return str(d)

# PDF Generator
class PDFReport(FPDF):
    def header(self):
        self.set_font("Helvetica", "B", 14)
        self.cell(0, 10, "Automated OSINT Report", ln=True, align="C")
        self.ln(5)

    def section_title(self, title):
        self.set_font("Helvetica", "B", 12)
        self.set_fill_color(240, 240, 240)
        self.cell(0, 10, title, ln=True, fill=True)

    def section_body(self, content):
        self.set_font("Helvetica", "", 10)
        self.multi_cell(0, 8, content)
        self.ln()

def generate_pdf_report(domain, whois_info, dns_info, ip_info, ssl_info, subdomains, filename):
    pdf = PDFReport()
    pdf.add_page()

    pdf.section_title("Domain")
    pdf.section_body(domain)

    pdf.section_title("WHOIS Information")
    pdf.section_body(format_dict(whois_info))

    pdf.section_title("DNS Records")
    pdf.section_body(format_dict(dns_info))

    ip, ipdata = ip_info
    pdf.section_title("IP Information")
    pdf.section_body(f"IP Address: {ip}\n{format_dict(ipdata)}")

    pdf.section_title("SSL Certificate")
    pdf.section_body(format_dict(ssl_info))

    pdf.section_title("Subdomains")
    pdf.section_body("\n".join(subdomains))

    pdf.output(filename)
